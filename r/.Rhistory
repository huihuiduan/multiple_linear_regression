setwd("~/1_MOOC_of_Coursera_edX_Udacity/4 Machine Learning - Earned Certificate/Homework/homework 1/for summary/r")
args<-commandArgs(TRUE)
training <- read.table(file = args[1], header = FALSE, sep = ",", quote = "")
training <- read.table(file = "training", header = FALSE, sep = ",", quote = "")
training <- read.table(file = "training.txt", header = FALSE, sep = ",", quote = "")
x_training <- training[, -1]
y_training <- training[, ncol(training)]
model <- lm(y_training ~ x_training)
ncol(training)
str(x_training)
str(y_training)
y_training <- data.frame(training[, ncol(training)])
model <- lm(y_training ~ x_training)
model <- lm(training[, ncol(training)] ~ training[, -1], data = training)
model <- lm(training[, ncol(training)] ~ ., data = training)
training <- read.table(file = "training.txt", header = FALSE, sep = ",", quote = "")
str(training)
training <- read.table(file = "training.txt", header = FALSE, sep = ",", quote = "")
training <- read.table(file = "training.txt", header = true, sep = ",", quote = "")
training <- read.table(file = "training.txt", header = TRUE, sep = ",", quote = "")
model <- lm(training[, ncol(training)] ~ ., data = training)
testing <- read.table(file = args[2], header = TRUE, sep = ",", quote = "")
testing <- read.table(file = "testing.txt", header = TRUE, sep = ",", quote = "")
predict <- predict(model, testing)
args <- ["training.txt", "testing.txt", "prediction.txt"]
args <- c("training.txt", "testing.txt", "prediction.txt")
training <- read.table(file = args[1], header = FALSE, sep = ",", quote = "")
x_training <- training[, -1]
y_training <- data.frame(training[, ncol(training)])
model <- lm(training[, ncol(training)] ~ ., data = training)
summary(model)
training[, ncol(training)]
model <- lm(training[, ncol(training)] ~ training[, -1], data = training)
model <- lm(training[, ncol(training)] ~ training[, 1:(ncol(training))], data = training)
training[, 1:(ncol(training))]
model <- lm(training[, ncol(training)] ~ training[, 1:(ncol(training) - 1)], data = training)
training[, 1:(ncol(training) - 1)]
str(training[, 1:(ncol(training) - 1)])
str(training[, ncol(training)])
model <- lm(training[, ncol(training):ncol(training)] ~ training[, 1:(ncol(training) - 1)], data = training)
str(training[, ncol(training):ncol(training)])
model <- lm(training[, ncol(training):ncol(training)] ~ training[, 1:(ncol(training) - 1)])
model <- lm(training[, ncol(training):ncol(training)] ~ as.matrix(training[, 1:(ncol(training) - 1)]))
testing <- read.table(file = args[2], header = FALSE, sep = ",", quote = "")
predict <- predict(model, testing)
summary(model)
model <- lm(V3 ~ ., data = training)
summary
summary(model)
testing <- read.table(file = args[2], header = FALSE, sep = ",", quote = "")
predict <- predict(model, testing)
write(predict, file = args[3], ncolumns = 1)
paste("V", 3)
?paste
model <- lm(paste("V", 3, sep = "") ~ ., data = training)
paste("V", 3, sep = "")
model <- lm(as.formula(paste("V", 3, sep = "")) ~ ., data = training)
as.formula(paste("V", 3, sep = ""))
model <- lm(as.name(paste("V", 3, sep = "")) ~ ., data = training)
as.name("F1")
as.name(paste("V", 3, sep = ""))
Vn <- as.name(paste("V", 3, sep = ""))
model <- lm(Vn ~ ., data = training)
date()
Vn <- as.name(paste("V", 3, sep = ""))
Vn
Vn <- as.formula(paste("V", 3, sep = ""))
Vn <- "V3"
f1 <- formula(paste(Vn, "~ SensoryTerm"))
model <- lm(f1, data = training)
Vn <- "V3"
f1 <- formula(paste(Vn, "~ ."))
model <- lm(f1, data = training)
testing <- read.table(file = args[2], header = FALSE, sep = ",", quote = "")
predict <- predict(model, testing)
write(predict, file = args[3], ncolumns = 1)
training <- read.table(file = args[1], header = FALSE, sep = ",", quote = "")
Vn <- paste("V", 3, sep = "")
my_formula <- formula(paste(Vn, "~ ."))
model <- lm(my_formula, data = training)
testing <- read.table(file = args[2], header = FALSE, sep = ",", quote = "")
predict <- predict(model, testing)
write(predict, file = args[3], ncolumns = 1)
cols <- ncol(training)
Vn <- paste("V", cols, sep = "")
my_formula <- formula(paste(Vn, "~ ."))
model <- lm(my_formula, data = training)
